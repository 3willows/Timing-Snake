/* eslint-disable react/prop-types */
import React from 'react';
import styled, { css, keyframes } from 'styled-components';

import { PAGE_PADDING, MAX_CONTENT_WIDTH, GRID_SIZE } from '../constants';

const ripple = keyframes`
  0% {
    -moz-box-shadow: 0 0 0 0 red;
    box-shadow: 0 0 0 0 red;
  }
  70% {
    -moz-box-shadow: 0 0 0 20px rgba(204,169,44, 0);
    box-shadow: 0 0 0 20px rgba(204,169,44, 0);
  }
  100% {
    -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0);
    box-shadow: 0 0 0 0 rgba(204,169,44, 0);
  }
`;

const mapSize = css`
  width: min(calc(100vw - ${PAGE_PADDING * 2}px), ${MAX_CONTENT_WIDTH - (PAGE_PADDING * 2)}px);
  height: min(calc(100vw - ${PAGE_PADDING * 2}px), ${MAX_CONTENT_WIDTH - (PAGE_PADDING * 2)}px);
`;

const GridContainer = styled.div`
  ${mapSize}
  display: grid;
  grid-template-columns: repeat(${GRID_SIZE}, 1fr);
  grid-template-rows: repeat(${GRID_SIZE}, 1fr);
  grid-gap: 2px;
`;

const Square = styled.div`
  background-color: ${(props) => (props.$isSnake ? '#FFF' : '#161616')};
`;

const Food = styled.div`
  border-radius: 100%;
  width: 100%;
  height: 100%;
  background: red;
  animation: ${ripple} 2s infinite;
  position: relative;
`;

const Container = styled.div`
  position: relative;
`;

const GameOver = styled.div`
  margin-bottom: 20px;
  font-weight: 900;
  font-size: 24px;
  color: white;
`;

const Mask = styled.div`
  ${mapSize}
  position: absolute;
  top: 0px;
  left: 0px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;

const StartButton = styled.button`
  border: 2px solid #fff;
  background: none;
  color: #fff;
  border-radius: 50px;
  padding: 8px 20px;
  font-size: 16px;
  cursor: pointer;
  &:hover {
    color: #161616;
    background: #FFF;
    transition: all 0.2s ease-in-out;
  }
`;

const MainMap = ({
  snake, food, isGameStart, gameOver, handleOnGameStart,
}) => {
  const { head, bodyList } = snake;
  const squares = Array(GRID_SIZE).fill(0).map((_, index) => index);
  return (
    <Container>
      <GridContainer>
        {
          // The crux of the programme, where the Snake is mapped onto the Main Map.
          // The Snake is an array [head, ... bodyList] of an object of the form (x: number, y: number).
          // square (lower case) is an array of integers from [0, 1, 2 ... 29]
          // To understand the code below:-
          // - first ignore the isSnake and isFood lines. The two squares.map creates 30 squares.  
          // - Second, ignore "key={`${row}_${column}`} data-x={column} data-y={row}".  The snake crawls even without them.
          // - Third, take into account again the isSnake and isFood lines.  What happened is that when each <Square> is generated,
          // the isSnake and isFood option returns true or false depending on whether they match the numbers generated by the two map
          // methods.  This is what made the snake crawl and generates the food.
          // In fact, p.5-34 of the text (and a quick grep) makes clear that "data-x" and "data-y" are only there for debugging.
          // The key is probably necessary for React purposes, but it is not part of the core logic of how the snake moves.
          squares.map((row) => squares.map((column) => {
            const isSnake = [head, ...bodyList].find((item) => item.x === column && item.y === row);
            const isFood = food.x === column && food.y === row;
            return (
              <Square key={`${row}_${column}`} data-x={column} data-y={row} $isSnake={isSnake} $isFood={isFood}>
                {isFood && <Food />}
              </Square>
            );
          }))
        }
      </GridContainer>
      {!isGameStart && (
        <Mask>
          {gameOver && <GameOver>Game Over</GameOver>}
          <StartButton type="button" onClick={handleOnGameStart}>{gameOver ? 'Restart' : 'Start'}</StartButton>
        </Mask>
      )}
    </Container>
  );
};

export default MainMap;
